---
title: "Ajout des identifiants élevage dans les données de contrôle laitier"
author: "Aurélien"
format: html
---

```{r setup}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
library(readxl)
library(ggplot2)
```


# Chargement des données

## Contrôle laitier

Données de contrôle laitier chargées.

```{r milk-recording-data}
path_to_file <- "../data/controle_elem.txt"
rec <- read.csv2(path_to_file)
```

Examen des données.

```{r milk-recording-data-glimpse}
glimpse(rec)
```
Les colonnes sont renommées et les données formattées pour faciliter la manipulation.

```{r milk-recording-formatting}
rec <- rec |> 
  rename(anim_id = ANIM,
         parity = NULACT,
         rec_date = DAPAUL,
         milk = LAI24H,
         fat = TBLACO,
         prot = TPLACO,
         scc = COLELC) |> 
  select(anim_id, rec_date, parity, milk, fat, prot, scc) |> 
  mutate(rec_date = as.Date(rec_date),
         milk = milk / 10)
```

## Mouvements

Chargement des donnés de mouvements.

```{r movement-data}
path_to_file <- "../data/mvt.txt"
mvt <- read.csv2(path_to_file)
```

Examen des données.

```{r mvt-glimpse}
glimpse(mvt)
```
Les colonnes sont renommées et les données formattées pour faciliter la manipulation.


```{r mvt-formatting}
mvt <- mvt |> 
  rename(anim_id = ANIM,
         birth_herd = NUM_EXP_NAIS,
         death_date = DAT_MORT,
         slaughter_date = DAT_ABAT,
         render_date = DAT_EQUAR,
         in_date = DAENCH,
         herd_id = NUM_EXP_DET,
         in_cause = CAENCH,
         out_date = DASORT,
         out_cause = CASORT) |> 
  mutate(death_date = as.Date(death_date),
         slaughter_date = as.Date(slaughter_date),
         render_date = as.Date(render_date),
         in_date = as.Date(in_date),
         out_date = as.Date(out_date)
         ) |> 
  select(anim_id, herd_id, in_date, in_cause, out_date, out_cause, birth_herd, death_date, slaughter_date, render_date)
```

## Fusion données contrôle laitier - données mouvements

```{r rec-mvt-join}
rec1 <- left_join(rec,
                  mvt |> 
                    select(anim_id, herd_id, in_date, out_date)
  ) |> 
  filter(rec_date >= in_date & (rec_date <= out_date | is.na(out_date)))
```

On s'aperçoit qu'il manque des données. Le code ci-dessous identifie les erreurs. On dirait qu'il s'agit d'animaux pour lesquels on ne peut pas savoir d'après les dates de mouvements rensignées dans quel élevage ils sont au moment du contrôle laitier. Cela correspond à `r nrow(rec) - nrow(rec1)` lignes de données.

```{r missing-herdid-milk-recording}
rec2 <- anti_join(rec, rec1)

anim_missing_rec <- rec2 |> 
  group_by(anim_id) |> 
  summarise(
    rec_first = min(rec_date),
    rec_last = max(rec_date)
  )

anim_missing_mvt <- mvt |> 
  filter(anim_id %in% unique(anim_missing_rec$anim_id)) |> 
  group_by(anim_id) |> 
  summarise(mvt_first = min(in_date),
           mvt_last = max(out_date))

anim_missing <- full_join(anim_missing_rec, anim_missing_mvt)
```
Création du jeu de données contrôle laitier final. Il faudra sans doute essayer de retrouver les animaux manquants auprès de l'Iele.

```{r rec-final}
rec <- rec1 |> 
  select(herd_id, rec_date, anim_id, parity, milk, fat, prot, scc) |> 
  arrange(herd_id, rec_date)
```

## Agrégation des données contrôle laitier par élevage et par an

```{r rec-herd-year}
test_day <- rec |> 
  group_by(herd_id, rec_date) |> 
  summarise(
    n_cows = length(unique(anim_id))
  )
```
Histogramme du nombre de vaches par contrôle, jusqu'à 50 vaches. L'objectif est d'identifier des contrôles avec peu de vaches qu'on voudrait enlever. On va enlever les contrôles avec moins de 10 vaches.

```{r number-cows-test-day}
hist(test_day$n_cows[test_day$n_cows < 50], breaks = 1:50)
```

On va maintenant compter le nombre de contrôles par an dans chaque élevage.

```{r}
rec_herd_year <- test_day |>
  filter(n_cows > 10) |> 
  mutate(rec_year = format(as.Date(rec_date), "%Y")) |> 
  group_by(herd_id, rec_year) |> 
  summarise(
    n_rec = length(unique(rec_date)),
    n_cows_med = median(n_cows)
  )
```

```{r ncows-rec-year-dist}
ggplot(rec_herd_year, aes(x = n_rec)) +
  geom_bar()
```
On sélectionne les élevages-années avec 11 ou 12 contrôles.

```{r herd-selection-nrec-year}
herd_year_sel <- rec_herd_year |> 
  filter(n_rec %in% 11:12)
```

Le jeu de données contient `r nrow(herd_year_sel)` élevages-années dans `r length(unique(herd_year_sel$herd_id))` élevages uniques. On extrait les contrôles laitiers correspondants.

```{r selected-milk-records}
test_days_sel <- left_join(herd_year_sel, test_day |> mutate(rec_year = format(as.Date(rec_date), "%Y")))

# hist(test_days_sel$n_cows)
```

```{r final-milk-recording-data}
rec_final <- left_join(test_days_sel |> 
                   select(herd_id, rec_date),
                 rec)
```
Tu peux enregistrer le fichier final pour ne pas avoir à refaire tourner ce script à chaque fois. Ne pas inclure ces fichiers de données générés dans les commits.

```{r saving-final-milk-recording-data}
write.csv2(rec_final, "../generated_datasets/rec_final.csv")
```



